/**
 * User: Soezen
 * Date: 8/12/13
 * Time: 19:28
 */

var mundi = require('./sur-snapps-mundi');
var io;

function handle(socket) {
    socket.on('login', function(data) {
        socket.set('username', data.username);
        var user = mundi.login(data.username);
        socket.broadcast.emit('player-list-add', user);
    });
    socket.on('disconnect', function() {
        socket.get('username', function(error, username) {
            if (!error) {
                var user = mundi.logout(username);
                if (user != null) {
                    socket.broadcast.emit('player-list-delete', user);
                }
            }
        });
    });
    socket.on('request-game', function(data) {
        data.requester = mundi.findPlayer(data.requester);
        socket.broadcast.emit('game-request-' + data.opponent, data);
    });
    socket.on('revoke-request', function(data) {
        socket.broadcast.emit('request-revoked-' + data.opponent, data);
    });
    socket.on('accept-request', function(data) {
        var connection = io.of(data.gameName).on('connection', function(gameSocket) {
            handleGameInput(gameSocket, connection);
        });
        connection.game = new mundi.Game(100, 75);

        socket.broadcast.emit('request-accepted-' + data.opponent, {
            gameName: data.gameName
        });
    });
}

// TODO cancel other pending requests when accepting one of requests
// TODO when leaving game (or entering players screen) enter user again as available for playing

// first we will always transmit an update view for each action
// if this causes performance issues, we should determine with some logic whether the view of the opponent needs to be updated
function handleGameInput(inSocket, outSocket) {
    inSocket.on('ready', function(data) {
        inSocket.set('username', data.username);
        outSocket.game.addPlayer(data.username);
        outSocket.emit('update-view', outSocket.game.getView(data.username));
    });
    inSocket.on('shoot', function(data) {
        inSocket.get('username', function(error, username) {
            console.log(username + ': bang bang bang');
        })
    });
    inSocket.on('move-start', function(data) {
        inSocket.get('username', function(error, username) {
            console.log(username + ': moving to the ' + data.direction);
        });
    });
    inSocket.on('move-stop', function(data) {
        inSocket.get('username', function(error, username) {
            console.log(username + ': stopped moving');
        });
    });
}

function setIo(input) {
    io = input;
}

exports.handle = handle;
exports.setIo = setIo;