/**
 * User: Soezen
 * Date: 2/11/13
 * Time: 10:13
 */

var logger = require('./logger');
var utils = require('./utils');

var mundi = {
    players: {}
};

function login(username) {
    var player = {
        name: username,
        nbrGamesWon: 0,
        nbrGamesLost: 0,
        roles: 'user'};
    mundi.players[username] = player;
    logger.info('user logged in: ' + username);
    return player;
}

function logout(username) {
    var player = mundi.players[username];
    delete mundi.players[username];
    logger.info('user logged out: ' + username);
    return player;
}

function players() {
    return mundi.players;
}

function findPlayer(username) {
    var playerFound;
    for (var i in mundi.players) {
        if (mundi.players.hasOwnProperty(i)) {
            var player = mundi.players[i];
            if (player.name == username) {
                playerFound = player;
                break;
            }
        }
    }
    return playerFound;
}

function Game(width, height) {
    var field = new Field(width, height);
    var players = {};

    function addPlayer(name) {
        players[name] = new Player(name, points);
    }

    function getView(playerName) {
        var playerView = players[playerName].getView();
        console.log('getView for player: ' + playerName);
        // determine which points have to be taken from the game based on the playerView (which contains the coordinates)
        return points.getView(playerView.getStartX(), playerView.getStartY());
    }

    return {
        getView: getView,
        addPlayer: addPlayer
    };
}

function Field(width, height) {
    var points = (function () {
        var points = [];

        function findPoint(x, y) {
            for (var i in points) {
                if (points.hasOwnProperty(i)) {
                    var point = points[i];
                    if (point.getX() == x && point.getY() == y) {
                        return point;
                    }
                }
            }
            return null;
        }

        // initialize all points as available
        for (var x = 0; x < width; x++) {
            for (var y = 0; y < height; y++) {
                points.push(new Point(x, y, PointStatus.AVAILABLE));
            }
        }

        // generate rocks on the sides
        var pointsOrdering = function(a, b) {
            return a.getWeight(width, height) < b.getWeight(width, height);
        };
        var firstPoint = findPoint(0, 0);
        var queue = new utils.PriorityQueue(pointsOrdering);
        queue.push(firstPoint);

        queue.forEach(function(current) {
            var isRock = utils.flipCoin(current.getWeight(width, height));
            if (isRock) {
                current.status = PointStatus.UNAVAILABLE;
                var x = current.getX();
                var y = current.getY();
                if (y > 0) {
                    queue.push(findPoint(x, y - 1));
                }
                if (x > 0) {
                    queue.push(findPoint(x - 1, y));
                }
                if (y < height - 2) {
                    queue.push(findPoint(x, y + 1));
                }
                if (x < width - 2) {
                    queue.push(findPoint(x + 1, y));
                }
            }
        });

        return points;
    })();

    function getView(x, y, width, height) {
        var view = [];
        for (var i in points) {
            if (points.hasOwnProperty(i)) {
                var point = points[i];
                if (point.getX() >= x && point.getX() <= x + width
                    && point.getY() >= y && point.getY() <= y + height) {
                    view.push(point);
                }
            }
        }
        return view;
    }

    return {
        getView: getView
    };
}

function Player(name, points) {
    var base = new Base(points);
    var tank = new Tank(base);
    var view = new View(base.points);

    function move(direction) {

    }

    function shoot() {

    }

    function getView() {
        return view;
    }

    return {
        name: name,
        move: move,
        shoot: shoot,
        getView: getView
    }
}

function Base(points) {
    // find location on field (not too close to any other players)
    // TODO SUR fix this (only for testing purposes)
    return {
        points: points
    };
}

function Tank(base) {
    // start with current location of base

    function isWithinBase(base) {
        // determines whether this tank is within the given base and if that base is of the same player
        // use callback function to execute stuff
    }

    return {
        isWithinBase: isWithinBase
    };
}

function View(points) {
    // create view with given points in the center
    var startX = (function() {
        return Point.getMinimumX(points) - 41;
    })();
    var startY = (function() {
        return Point.getMinimumY(points) - 41;
    })();

    return {
        getStartX: function() {
            return startX;
        },
        getStartY: function() {
            return startY
        }
    };
}

function Point(x, y, status) {
    return {
        status: status,
        getX: function() {
            return x;
        },
        getY: function() {
            return y;
        },
        getWeight: function(width, height) {
            return (50 / (x < width / 2 ? x : width - x))
                + (50 / (y < height / 2 ? y : height - y));
        }
    };
}

Point.getMinimumX = function(points) {
    var minX = -1;

    for (var i in points) {
        if (points.hasOwnProperty(i)) {
            var point = points[i];
            if (Point.isPoint(point)) {
                if (minX == -1 || minX > point.getX()) {
                    minX = point.getX();
                }
            }
        }
    }

    return minX;
};
Point.getMinimumY = function(points) {
    var minY = -1;

    for (var i in points) {
        var point = points[i];
        if (Point.isPoint(point)) {
            if (minY == -1 || minY > point.getY()) {
                minY = point.getY();
            }
        }
    }

    return minY;
};
Point.isPoint = function(object) {
    return typeof object === 'Point';
}

var PointStatus = {
    AVAILABLE: 0,
    TRAVERSED: 1,
    UNAVAILABLE: 2
}
exports.players = players;
exports.findPlayer = findPlayer;
exports.login = login;
exports.logout = logout;
exports.Field = Field;
exports.Game = Game;